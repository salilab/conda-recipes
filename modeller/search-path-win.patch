--- orig/modlib/modeller/__init__.py	2020-09-01 13:08:41.651074992 -0700
+++ patched/modlib/modeller/__init__.py	2020-09-01 13:06:45.977903376 -0700
@@ -27,71 +27,6 @@
 except ImportError:
     config = None
 
-def __get_python_api_ver():
-    """Get the Python version at which the C API last changed."""
-    ver = sys.version_info[0:2]
-    if ver[0] == 3:
-        if ver[1] < 2:
-            return (3,0)
-        elif ver[1] == 2:
-            return (3,2)
-        else:
-            return (3,3)
-    elif ver[0] == 2 and ver[1] >= 5:
-        return (2,5)
-    return None
-
-def __is_64_bit_windows():
-    """Return True iff we are running on 64-bit Windows."""
-    # This only works on Python 2.5 or later
-    if hasattr(sys, 'maxsize'):
-        return sys.maxsize > 2**32
-    # This works on older Pythons, but not in Python 3
-    else:
-        return type(sys.dllhandle) == long
-
-# Special processing on Windows to find _modeller.pyd and Modeller DLLs:
-if hasattr(config, 'install_dir') and hasattr(sys, 'dllhandle'):
-    if __is_64_bit_windows():
-        exetype = 'x86_64-w64'
-    else:
-        exetype = 'i386-w32'
-    dpath = config.install_dir + '\\lib\\%s\\python%d.%d' \
-                                 % ((exetype,) + sys.version_info[:2])
-    if dpath not in sys.path:
-        # Insert *after* first entry, so as not to break parallel module's
-        # propagation of the first entry (that containing the running script's
-        # directory) to slaves
-        sys.path.insert(1, dpath)
-    try:
-        import os
-        dpath = config.install_dir + '\\lib\\%s' % exetype
-        if dpath not in os.environ['PATH']:
-            os.environ['PATH'] = dpath + ';' + os.environ['PATH']
-        # Python 3.8 or later don't look in PATH for DLLs
-        if hasattr(os, 'add_dll_directory'):
-            __dll_directory = os.add_dll_directory(dpath)
-        del os
-    except ImportError:
-        pass
-    del dpath
-# Add Python version-specific directory to search path:
-elif hasattr(config, 'install_dir'):
-    api_ver = __get_python_api_ver()
-    if api_ver is not None:
-        try:
-            import os.path, re, sys
-            srch = re.compile("%s/*lib/[^/]+/?" % config.install_dir)
-            for (n, pathcomp) in enumerate(sys.path):
-                if srch.match(pathcomp):
-                    modpath = os.path.join(pathcomp, 'python%d.%d' % api_ver)
-                    if modpath not in sys.path:
-                        sys.path.insert(n, modpath)
-                    break
-            del re, n, pathcomp, os, srch
-        except ImportError:
-            pass
-
 # Set Modeller install location and license
 import _modeller
 if hasattr(config, 'license'):
