# To make a nightly build package, set version to date (e.g. '20210413')
# and nightly_hash to the corresponding git hash (e.g. '182d9373c4')
{% set version = "2.15.0" %}
{% set nightly_hash = '' %}


package:
{% if nightly_hash == '' %}
  name: imp
{% else %}
  name: imp-nightly
{% endif %}
  version: {{ version }}

source:
{% if nightly_hash == '' %}
  fn: imp-{{ version }}.tar.gz
  url: https://integrativemodeling.org/{{ version }}/download/imp-{{ version }}.tar.gz
  sha256: be2c13c95e4347f2fa4fe4f845a109464e9b95c6a417e286ba57aa79a7cd1a16
{% else %}
  fn: imp-{{ version }}.develop.{{ nightly_hash }}.tar.gz
  url: https://integrativemodeling.org/nightly/download/imp-{{ version }}.develop.{{ nightly_hash }}.tar.gz
{% endif %}
  patches:
{% if nightly_hash == '' %}
    - clang-6-cpp14.patch
    - cmake-w32-deps.patch
    - sfmap-swap.patch
    - anon-export-fix.patch
    - bc-clustering.patch  # [osx]
{% endif %}
    - imp-directories.patch  # [win]

build:
  number: 0
  detect_binary_files_with_prefix: True  # [not win]

requirements:
  build:
    - {{ compiler('c') }}
    - {{ compiler('cxx') }}
    - llvm-openmp  # [osx]
    - libgomp      # [linux]
    - pkg-config  # [not win]
    - swig
    - cmake
    - ninja
  host:
    - python
    # We don't include numpy support on Python 2 because it isn't pinned
    # by conda-forge; we don't want to unnecessarily restrict installation
    - numpy  # [py > 27]
    # RMF and IHM are only built for Python 3
    - rmf  # [py > 27]
    - ihm  # [py > 27]
    - boost-cpp
    - hdf5
    # We need both the libprotobuf library and the Python wrappers
    # Help out the solver to get a working combination of protobuf and opencv
    - protobuf >=3.17.0  # [py > 27]
    - protobuf >=3.11.0  # [py == 27]
    # We only need the library; we don't use the OpenCV Python wrappers
    - libopencv
    # We don't need matplotlib to build IMP, but we include it here so that
    # the resulting IMP package can be installed alongside matplotlib
    # (otherwise IMP pulls in a newer Boost, which is incompatible)
    - matplotlib   # [py == 27]
    - eigen
    # Force usage of conda-forge fftw, not salilab
    - fftw >3.3.4
    - libtau
    - gsl
    - cgal-cpp
    - mpich  # [not win]
    - msmpi  # [win]

  run:
    - python
    - {{ pin_compatible('numpy') }}  # [py > 27]
    # RMF does not pin its exports, but we link against the C++ DSO
    - {{ pin_compatible('rmf', max_pin='x.x') }}  # [py > 27]
    - ihm  # [py > 27]
    # CGAL code pulls in mpfr and gmp (on Linux/Mac) or mpir (on Windows)
    - gmp   # [not win]
    - mpir  # [win]
    - mpfr
    # No need to pin packages that define run_exports
    - libopencv
    - mpich  # [not win]
    - msmpi  # [win]
    - {{ pin_compatible('libprotobuf', max_pin='x.x') }}
    - {{ pin_compatible('protobuf', max_pin='x.x') }}
    - {{ pin_compatible('boost-cpp', max_pin='x.x.x') }}
    - {{ pin_compatible('hdf5', max_pin='x.x.x') }}
    - {{ pin_compatible('fftw', max_pin='x.x') }}
    - {{ pin_compatible('gsl', max_pin='x.x') }}
    - {{ pin_compatible('libtau', max_pin='x.x') }}

test:
  # Need Eigen to test IMPConfig.cmake
  requires:
    - eigen
  # Python imports
  imports:
    - IMP
    - IMP.atom
    - IMP.cgal
    - IMP.em2d
    - IMP.npc
    - IMP.npctransport
    - IMP.bayesianem
    - IMP.sampcon
    - IMP.rmf
    - IMP.mpi
    - IMP.spb
    - IMP.cnmultifit
    - RMF
  # Command line tools
  commands:
    - foxs --help
    - spb_test_score --help
    - cnmultifit --help
    - imp_sampcon --help
    - multifit --help

about:
  home: https://integrativemodeling.org
  license: GPL-3.0-or-later
  license_file:
    - COPYING.LGPL
    - COPYING.GPL
  summary: "The Integrative Modeling Platform"
  description: >
    IMP's broad goal is to contribute to a comprehensive structural
    characterization of biomolecules ranging in size and complexity from small
    peptides to large macromolecular assemblies, by integrating data from
    diverse biochemical and biophysical experiments. IMP provides an open
    source C++ and Python toolbox for solving complex modeling problems, and a
    number of applications for tackling some common problems in a user-friendly
    way. IMP can also be used from the
    [Chimera](http://www.cgl.ucsf.edu/chimera/) molecular modeling system,
    or via one of several web applications.

    See [the IMP website](https://integrativemodeling.org/) for more details.

    If you have problems with this conda package, please
    [open an issue](https://github.com/salilab/conda-recipes/issues).
  doc_url: https://integrativemodeling.org/doc.html
  dev_url: https://github.com/salilab/imp/

extra:
  recipe-maintainers:
    - benmwebb
